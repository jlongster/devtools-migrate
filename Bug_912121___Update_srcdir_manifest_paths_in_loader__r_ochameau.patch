# HG changeset patch
# User J. Ryan Stinnett <jryans@gmail.com>
# Date 1442288027 18000
#      Mon Sep 14 22:33:47 2015 -0500
# Node ID 02a0e044d34a52277ecb1ba8cdd69c5fdf8d630d
# Parent  691b7cc11c5222eb96ee18ae90d02b3ea24b8c70
Bug 912121 - Update srcdir manifest paths in loader. r=ochameau

diff --git a/devtools/shared/Loader.jsm b/devtools/shared/Loader.jsm
--- a/devtools/shared/Loader.jsm
+++ b/devtools/shared/Loader.jsm
@@ -127,22 +127,22 @@ BuiltinProvider.prototype = {
 function SrcdirProvider() {}
 SrcdirProvider.prototype = {
   fileURI: function(path) {
     let file = new FileUtils.File(path);
     return Services.io.newFileURI(file).spec;
   },
 
   load: function() {
-    let srcdir = Services.prefs.getComplexValue("devtools.loader.srcdir",
+    let srcDir = Services.prefs.getComplexValue("devtools.loader.srcdir",
                                                 Ci.nsISupportsString);
-    srcdir = OS.Path.normalize(srcdir.data.trim());
-    let devtoolsDir = OS.Path.join(srcdir, "devtools");
+    srcDir = OS.Path.normalize(srcDir.data.trim());
+    let devtoolsDir = OS.Path.join(srcDir, "devtools");
     let sharedDir = OS.Path.join(devtoolsDir, "shared");
-    let modulesDir = OS.Path.join(srcdir, "toolkit", "modules");
+    let modulesDir = OS.Path.join(srcDir, "toolkit", "modules");
     let devtoolsURI = this.fileURI(devtoolsDir);
     let gcliURI = this.fileURI(OS.Path.join(sharedDir,
                                             "gcli", "source", "lib", "gcli"));
     let promiseURI = this.fileURI(OS.Path.join(modulesDir,
                                                "Promise-backend.js"));
     let acornURI = this.fileURI(OS.Path.join(sharedDir, "acorn"));
     let acornWalkURI = OS.Path.join(acornURI, "walk.js");
     let ternURI = OS.Path.join(sharedDir, "tern");
@@ -171,17 +171,17 @@ SrcdirProvider.prototype = {
         // ⚠ DISCUSSION ON DEV-DEVELOPER-TOOLS REQUIRED BEFORE MODIFYING ⚠
       },
       globals: this.globals,
       invisibleToDebugger: this.invisibleToDebugger,
       sharedGlobal: true,
       sharedGlobalBlacklist: sharedGlobalBlacklist
     });
 
-    return this._writeManifest(devtoolsDir).then(null, Cu.reportError);
+    return this._writeManifest(srcDir).then(null, Cu.reportError);
   },
 
   unload: function(reason) {
     Loader.unload(this.loader, reason);
     delete this.loader;
   },
 
   _readFile: function(filename) {
@@ -202,42 +202,47 @@ SrcdirProvider.prototype = {
     return deferred.promise;
   },
 
   _writeFile: function(filename, data) {
     let promise = OS.File.writeAtomic(filename, data, {encoding: "utf-8"});
     return promise.then(null, (ex) => new Error("Couldn't write manifest: " + ex + "\n"));
   },
 
-  _writeManifest: function(dir) {
-    return this._readFile(OS.Path.join(dir, "jar.mn")).then((data) => {
+  _writeManifest: function(srcDir) {
+    let clientDir = OS.Path.join(srcDir, "devtools", "client");
+    return this._readFile(OS.Path.join(clientDir, "jar.mn")).then((data) => {
       // The file data is contained within inputStream.
       // You can read it into a string with
       let entries = [];
       let lines = data.split(/\n/);
       let preprocessed = /^\s*\*/;
-      let contentEntry = new RegExp("^\\s+content/(\\w+)/(\\S+)\\s+\\((\\S+)\\)");
+      let contentEntry =
+        new RegExp("^\\s+content/(\\w+)/(\\S+)\\s+\\((\\S+)\\)");
       for (let line of lines) {
         if (preprocessed.test(line)) {
           dump("Unable to override preprocessed file: " + line + "\n");
           continue;
         }
         let match = contentEntry.exec(line);
         if (match) {
           let pathComponents = match[3].split("/");
-          pathComponents.unshift(dir);
+          pathComponents.unshift(clientDir);
           let path = OS.Path.join.apply(OS.Path, pathComponents);
           let uri = this.fileURI(path);
-          let entry = "override chrome://" + match[1] + "/content/" + match[2] + "\t" + uri;
+          let entry = "override chrome://" + match[1] +
+                      "/content/" + match[2] + "\t" + uri;
           entries.push(entry);
         }
       }
-      return this._writeFile(OS.Path.join(dir, "chrome.manifest"), entries.join("\n"));
+      return this._writeFile(OS.Path.join(clientDir, "chrome.manifest"),
+                             entries.join("\n"));
     }).then(() => {
-      Components.manager.addBootstrappedManifestLocation(new FileUtils.File(dir));
+      let clientDirFile = new FileUtils.File(clientDir);
+      Components.manager.addBootstrappedManifestLocation(clientDirFile);
     });
   }
 };
 
 var gNextLoaderID = 0;
 
 /**
  * The main devtools API.
